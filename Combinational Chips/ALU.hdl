// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	Mux16(a = x, b = false, sel = zx, out = x1);
	Mux16(a = y, b = false, sel = zy, out = y1);

  // Negate x
	Not16(in = x1, out = notx1);
	Mux16(a = x1, b = notx1, sel = nx, out = x2);

 // Negate y	
	Not16(in = y1, out = noty1);
	Mux16(a = y1, b = noty1, sel = ny, out = y2);
  
 // Compute 
	And16(a = x2, b = y2, out = x4);
	Add16(a = x2, b = y2, out = x5);
	Mux16(a = x4, b = x5, sel = f, out = out1);

 // Negate
	Not16(in = out1, out = out2);
	Mux16(a = out1, b = out2, sel = no, out = out, out[0] = a, out[1] = b, out[2] = c, out[3] = d, out[4] = e, out[5] = g, out[6] = h, out[7] = i, out[8] = j, out[9] = k, out[10] = l, out[11] = m, out[12] = n, out[13] = o, out[14] = p, out[15] = q);
	
	Or(a = a, b = b, out = out01);
	Or(a = c, b = d, out = out23);
	Or(a = e, b = g, out = out45);
	Or(a = h, b = i, out = out67);
	Or(a = j, b = k, out = out89);
	Or(a = l, b = m, out = out1011);
	Or(a = n, b = o, out = out1213);
 	Or(a = p, b = q, out = out1415);

	Or(a = out01,  b = out23, out = out0123);
	Or(a = out45, b = out67, out = out4567);
	Or(a = out89, b = out1011, out = out891011);
	Or(a = out1213, b = out1415, out = out12131415);

	Or(a = out0123, b = out4567, out = out01234567);
	Or(a = out891011, b = out12131415, out = out89101112131415);

	Or(a = out01234567, b = out89101112131415, out = orr);

	Mux(a = true,   b = false, sel = orr, out = zr);
	Mux(a = false , b = true , sel = q, out = ng);
	
}